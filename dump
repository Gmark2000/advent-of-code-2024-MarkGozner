var lines = File.ReadLines("input.txt").ToArray();
var registers = (
    A: int.Parse(lines[0].Split(':')[1]),
    B: int.Parse(lines[1].Split(':')[1]),
    C: int.Parse(lines[2].Split(':')[1])
);
var program = lines[4].Split(':')[1].Split(',').Select(int.Parse).ToArray();

var output = SolvePartOne(registers, program);
Console.WriteLine(string.Join(",", output));

static List<int> SolvePartOne((int A, int B, int C) registers, int[] program)
{
    List<int> output = [];
    var ip = 0;
    var (a, b, c) = registers;

    while (ip < program.Length - 1)
    {
        var opcode = program[ip];
        var operand = program[ip + 1];
        var combo = operand switch
        {
            <= 3 => operand,
            4 => a,
            5 => b,
            6 => c,
            _ => throw new InvalidOperationException($"Invalid operand: {operand}")
        };

        switch (opcode)
        {
            case 0: a = a / (1 << combo); break;
            case 1: b ^= operand; break;
            case 2: b = combo % 8; break;
            case 3: if (a != 0) { ip = operand; continue; } break;
            case 4: b ^= c; break;
            case 5: output.Add(combo % 8); break;
            case 6: b = a / (1 << combo); break;
            case 7: c = a / (1 << combo); break;
        }

        ip += 2;
    }

    return output;
}
